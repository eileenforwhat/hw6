import scipy.io
import numpy as np
from single_layer import run_epoches
from sklearn import preprocessing
<<<<<<< HEAD
import time
=======
import multi_layer as ml
>>>>>>> db724771709fc2101451871e59029daf28447d36


if __name__ == '__main__':
    train = scipy.io.loadmat('data/train.mat')
    train_images = train['train']['images'][0][0] # (28, 28, 60000) ndarray
    train_labels = train['train']['labels'][0][0] # (60000, 1) ndarray
    # train = scipy.io.loadmat('data/train_small.mat')
    # train_images = train['train'][0][6][0][0][0]
    # train_labels = train['train'][0][6][0][0][1]
    # (60000, 784) ndarray
    train_images = \
        np.reshape(np.transpose(train_images, [2, 0, 1]), (60000, 784))

    # preprocessing
    # for row in range(train_images.shape[0]):
    #     std = np.std(train_images[row,:])
    #     mean = np.mean(train_images[row,:])
    #     train_images[row,:] = (train_images[row,:] - mean) / std
    #     print np.mean(train_images[row,:])
    #     print np.std(train_images[row,:])

    train_images = preprocessing.scale(train_images.astype(float), axis=1)

    test = scipy.io.loadmat('data/test.mat')
    test_images = test['test']['images'][0][0]
    test_labels = test['test']['labels'][0][0]
    test_images = \
        np.reshape(np.transpose(test_images, [2, 0, 1]), (10000, 784))
    
    # preprocessing
    # for row in range(test_images.shape[0]):
    #     std = np.std(test_images[row,:])
    #     mean = np.mean(test_images[row,:])
    #     test_images[row,:] = (test_images[row,:] - mean) / std

    test_images = preprocessing.scale(test_images.astype(float), axis=1)

<<<<<<< HEAD
    start = time.clock()
    run_epoches(train_images, train_labels, test_images, test_labels)
    end = time.clock()
    elapsed = (end - start) / 3600
    print 'elapsed time (hours) for single layered network=', elapsed
=======
#    start = time.clock()
#    mse_weights, mse_bias, entropy_weights, entropy_bias = \
#        run_epoches(train_images, train_labels, test_images, test_labels, n=300)
#    end = time.clock()
#    elapsed = (end - start) / 3600
#    print 'elapsed time (hours) for single layered network=', elapsed
    mse_weights, mse_bias, entropy_weights, entropy_bias = \
        ml.run_epoches(train_images, train_labels)
>>>>>>> db724771709fc2101451871e59029daf28447d36
